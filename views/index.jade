extends layout

block content

  #stage.hero-unit
    .row-fluid
      .span3
        #current-track
          span#time 00:00

        .row-fluid
          .span3
            a.btn(href="#", data-action="toggle-volume", data-intro="<h5>Welcome to soundtrack.io!</h5>  Since you're new and we're polite, we've muted the sound.  You can turn it on here.", data-step="1")
              i.icon-volume-up
          .span9
            input.slider(type="text", name="volume", value="80", data-slider-min="0", data-slider-max="100", data-slider-value="80")

        h3 Playlist
        ul#playlist(data-intro="If the playlist ever reaches zero, soundtrack.io will automatically choose song based on what's been played in the past.", data-step="3")

        h3 Add Track
        form#search-form
          input(type="text", data-intro="<h5>Queue a song!</h5>Search here for a track to add it to the playlist.", data-step="2")#search-query
          #search-results

      .span6
        #screen-one
          .screen-inner#screen-inner

      #decks
        #slot-1
        #slot-2
        #slot-3
        #slot-4
        #slot-5

      .span3(data-intro="<h5>Music is social!</h5>You can chat with all the other listeners here.  They're listening to the same exact music, at the same time!", data-step="4")
        h3 Chat
        #messages
        form#chat-form
          input(type="text", autocomplete="off")#chat-input
        h3 Users
        #userlist

  #audience

  if (!user)
    script.
      registered = false;
  else
    script.
      registered = true;

  script.

    var sockjs = new SockJS('stream');

    sockjs.onopen    = function()  {  };
    sockjs.onmessage = function(e) {
      var msg = JSON.parse(e.data);

      switch (msg.type) {
        default: console.log('unhandled message: ' + msg); break;
        case 'track':
          ytplayer.cueVideoById( msg.data.id );
          ytplayer.seekTo( msg.seekTo );
          ytplayer.playVideo();
          updatePlaylist();
        break;
        case 'playlist:add':
          updatePlaylist();
        break;
        case 'join':
          $('<li data-user-id="' + msg.data.id + '">'+msg.data.id+'</li>').appendTo('#userlist');
        break;
        case 'part':
          $('#userlist li[data-user-id='+msg.data.id+']').remove();
        break;
        case 'chat':
          $( msg.data.formatted ).appendTo('#messages');
          $('#messages').animate({ scrollTop: $('#messages').outerHeight() }, "fast");
        break;
      }
    };
    sockjs.onclose   = function() { 
      // TODO: reconnect
    };
    function updatePlaylist() {
      $.get('/playlist.json', function(data) {
        $('#playlist').html('');
        data.forEach(function(track) {
          $('<li>'+track.id+'</li>').appendTo('#playlist');
        });
      });
    }
    function updateUserlist() {
      $.get('/listeners.json', function(data) {
        $('#userlist').html('');
        data.forEach(function(user) {
           $('<li data-user-id="' + user.id + '">'+user.id+'</li>').appendTo('#userlist');
        });
      });
    }
    updatePlaylist();
    updateUserlist();